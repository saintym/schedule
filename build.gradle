plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.projectlombok:lombok:1.18.26'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.hibernate.validator:hibernate-validator'
	implementation 'org.glassfish:jakarta.el'

	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")

	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'
}

def querydslSrcDir = 'build/generated/sources/annotationProcessor/java/main'
sourceSets {
	main {
		java {
			srcDirs += querydslSrcDir
		}
	}
}

tasks.named('compileJava') {
	options.compilerArgs += '-Aquerydsl.generatedAnnotationClass=jakarta.annotation.Generated'
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslSrcDir)
}

clean {
	delete file(querydslSrcDir)
}

tasks.named('test') {
	useJUnitPlatform()
}